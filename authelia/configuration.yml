---
server:
  address: 'tcp://:9091/auth'
  endpoints:
    authz:
      auth-request:
        implementation: 'AuthRequest'

log:
  level: debug
  format: text
  file_path: /config/authelia.log
  keep_stdout: true

authentication_backend:
  # Password reset through authelia works normally.
  password_reset:
    disable: false
  # How often authelia should check if there is an user update in LDAP
  refresh_interval: 1m
  ldap:
    implementation: custom
    # Pattern is ldap://HOSTNAME-OR-IP:PORT
    # Normal ldap port is 389, standard in LLDAP is 3890
    address: 'ldap://lldap:3890'
    # The dial timeout for LDAP.
    timeout: 5s
    # Use StartTLS with the LDAP connection, TLS not supported right now
    start_tls: false
    #tls:
    #  skip_verify: false
    #  minimum_version: TLS1.2
    # Set base dn, like dc=google,dc.com
    base_dn: {{ env "LLDAP_LDAP_BASE_DN" }}
    # You need to set this to ou=people, because all users are stored in this ou!
    additional_users_dn: ou=people
    # To allow sign in both with username and email, one can use a filter like
    # (&(|({username_attribute}={input})({mail_attribute}={input}))(objectClass=person))
    users_filter: "(&({username_attribute}={input})(objectClass=person))"
    # Set this to ou=groups, because all groups are stored in this ou
    additional_groups_dn: ou=groups
    # The groups are not displayed in the UI, but this filter works.
    groups_filter: "(member={dn})"
    # The attribute holding the name of the group.
    attributes:
      display_name: displayName
      username: uid
      group_name: cn
      mail: mail
      # distinguished_name: distinguishedName
      # member_of: memberOf

    # The username and password of the bind user.
    # "bind_user" should be the username you created for authentication with the "lldap_strict_readonly" permission. It is not recommended to use an actual admin account here.
    # If you are configuring Authelia to change user passwords, then the account used here needs the "lldap_password_manager" permission instead.
    user: uid=sw_authelia_ldap,ou=people,{{ env "LLDAP_LDAP_BASE_DN" }}
    # Password can also be set using a secret: https://www.authelia.com/docs/configuration/secrets.html
    # password: {{ env "AUTHELIA_AUTHENTICATION_BACKEND_LDAP_PASSWORD" }}

session:
  name: 'authelia_session'
  same_site: 'lax'
  # secret: from fil
  expiration: '10m'
  inactivity: '3m'
  # remember_me: '1M'
  cookies:
    - domain: {{ env "DOMAIN" }}
      authelia_url: 'https://{{ env "DOMAIN" }}/auth'
      default_redirection_url: 'https://{{ env "DOMAIN" }}'
      name: 'authelia_session'
      same_site: 'lax'
      expiration: '1h'
      inactivity: '5m'
      remember_me: '1d'

storage:
  # encryption_key: from file
  local:
    path: /config/db.sqlite3

access_control:
  default_policy: deny
  rules:
    # Authelia endpoints
    - domain: ['{{ env "DOMAIN" }}']
      policy: bypass
      resources:
        - "^/auth/.*$"

    # Grafana access
    - domain: ['{{ env "DOMAIN" }}']
      policy: one_factor
      resources:
        - "^/grafana/.*$"
      # subject:
      #   - "group:admin"
      #   - "group:lldap_admin"

    # # Grafana API access
    # - domain: ['{{ env "DOMAIN" }}']
    #   policy: one_factor
    #   resources:
    #     - "^/grafana/api/.*$"

    # Optional: Add a catch-all rule to redirect unauthenticated users
    - domain: ['{{ env "DOMAIN" }}']
      policy: one_factor
      resources:
        - "^/.*$"

regulation:
  max_retries: 3
  find_time: 2m
  ban_time: 5m

notifier:
  filesystem:
    filename: /config/notification.txt

# identity_validation:
#   reset_password:
#     enabled: false

identity_providers:
  oidc:
    jwks:
      - key: {{ secret "/config/secrets/identity_providers/oidc/jwks/rsa.2048.key" | mindent 10 "|" | msquote }}
    lifespans:
      access_token: 1h
      authorize_code: 1m
      id_token: 1h
      refresh_token: 90d
    enable_client_debug_messages: false
    enforce_pkce: public_clients_only
    cors:
      endpoints: 
        - 'authorization'
        - 'token'
        - 'revocation'
        - 'introspection'
        - 'userinfo'
      allowed_origins:
        - https://{{ env "DOMAIN" }}
        - http://grafana:3000
    clients:
      # --------------------------------------------------------
      # ---------------------- Grafana --------------------------
      # --------------------------------------------------------
      - client_id: grafana
        client_name: Grafana
        client_secret: $pbkdf2-sha512$310000$RqyjVdFZ24szrVeVSEU3WQ$xIAqxfxQS9/CpB9TXBObXfeLgKDzF9iNTPU.pQL75wvO9hgB.gG6EBoO8GAGDkl9U/zJ1lIGb8u2QVwOimY.Sw
        public: false
        authorization_policy: one_factor
        consent_mode: implicit
        redirect_uris:
          - https://{{ env "DOMAIN" }}/grafana/login/generic_oauth
        scopes:
          - openid
          - profile
          - email
          - groups
        grant_types:
          - authorization_code
        response_types:
          - code
        userinfo_signed_response_alg: none

      # --------------------------------------------------------
      # ---------------------- Frontend ------------------------
      # --------------------------------------------------------
      - client_id: frontend
        client_name: Frontend
        client_secret: $pbkdf2-sha512$310000$M3U.XaNboPcITyLRmpEPsw$S1QBE7Wls1LA6N.2dckW5dOetsZUOfWAfCxWgNIpBnzobHC6pow0j1cqHHHi6.Y9QP8OIIp3IUe1pmEbIvGCfw
        public: false
        authorization_policy: one_factor
        consent_mode: implicit
        redirect_uris:
          - 'https://{{ env "DOMAIN" }}/callback'
        scopes:
          - 'openid'
          - 'profile'
          - 'email'
          - 'groups'
        grant_types:
          - authorization_code
        response_types:
          - 'code'
        # response_modes:
        #   - 'form_post'
        #   - 'query'
        userinfo_signed_response_alg: 'none'
        token_endpoint_auth_method: 'client_secret_post'

